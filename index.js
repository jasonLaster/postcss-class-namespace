// Generated by CoffeeScript 1.10.0
(function() {
  var CSON, fs, namespace, path, postcss;

  fs = require('fs');

  path = require('path');

  CSON = require('cson');

  postcss = require('postcss');

  namespace = postcss.plugin('postcss-namespace', function(opts) {
    if (opts == null) {
      opts = {
        token: '-'
      };
    }
    return function(css) {
      var namespaces, target;
      namespaces = [];
      css.walkAtRules('namespace', function(rule) {
        var line, nextLine;
        namespace = rule.params;
        line = rule.source.start.line;
        if (namespaces.length === 0) {
          namespaces.push({
            namespace: namespace,
            line: line,
            nextLine: null
          });
        } else {
          nextLine = rule.source.start.line;
          namespaces[namespaces.length - 1].nextLine = nextLine;
          namespaces.push({
            namespace: namespace,
            line: line,
            nextLine: null
          });
        }
        return rule.remove();
      });
      if (namespaces.length !== 0) {
        target = namespaces.shift();
        return css.walkRules(function(rule) {
          var currentLine, handler, matched, rToken, re, result, selector;
          currentLine = rule.source.start.line;
          if ((target.nextLine != null) && target.nextLine < currentLine) {
            target = namespaces.shift();
          }
          if (target.line < currentLine) {
            selector = rule.selector;
            re = /[^>]+/g;
            result = '';
            handler = function(m, idOrClass, name) {
              if (target.namespace) {
                return idOrClass + target.namespace + opts.token + name;
              } else {
                return idOrClass + name;
              }
            };
            if (selector[0] === '&') {
              return;
            }
            while ((matched = re.exec(selector)) != null) {
              rToken = /&?\s*(\.|#)/;
              if (matched.index === 0 || matched[0][0] === '&') {
                result += matched[0].replace(rToken, function(m, selectorToken) {
                  if (target.namespace) {
                    return selectorToken + target.namespace + opts.token;
                  } else {
                    return selectorToken;
                  }
                });
              } else {
                result += '>' + matched[0];
              }
            }
            return rule.selector = result ? result : selector.replace(/(\.|#)/, function(selectorToken) {
              return selectorToken + target.namespace + opts.token;
            });
          }
        });
      }
    };
  });

  module.exports = namespace;

}).call(this);
